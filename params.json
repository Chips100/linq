{
  "name": "Linq.js",
  "tagline": "A javascript implementation of .NETs LINQ enumerable interface with its extension methods.",
  "body": "### Handling sequences in Javascript efficiently.\r\nWhen working with lots of objects, adopting the easiest approach to process them can quickly cause performance issues. If you want to filter elements from a list of one million items that satisfy a certain condition and later on only need the first ten results, you do not want to check the condition for all items first just to throw the rest away. Chaining multiple transformations on a source sequence throughout different parts of the code to produce a result set is a common operation when working with data. Having an optimized way to create such constructs can simplify your code and speed up the development while preventing performance bottlenecks resulting from unnecessary operations. Linq.js provides an approach to tackle this problem that is easy to learn and adopt. It lets you build queries upon your source sequences that only start evaluating the items when it needs to. \r\n\r\n### Familiar syntax from .NET LINQ\r\nIf you have experience with the established .NET LINQ system and its extension methods, using Linq.js will feel natural to you. The method signatures are designed to closely match the .NET signatures while adhering to common Javascript conventions.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}